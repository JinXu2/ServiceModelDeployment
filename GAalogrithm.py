import pandas as pd
import openpyxl
import random
import numpy as np

from Service import Service
from Application import Application
from User import User
from EdgeServer import Edge
from Node import Node
from queue import Queue
import copy
from DAG import DAG

edge_data = pd.read_excel('数据处理/data_sheets.xlsx', sheet_name='edge_data1')

# 且不能超过其能力
capacity = edge_data['capacity'].to_list()
edge_data = pd.read_excel('数据处理/data_sheets.xlsx', sheet_name='edge_data1')
edge_list = []
for i in range(40):
    temp = edge_data.loc[i].values[0:-1]
    temp_edge = Edge(no=i + 1, latitude=temp[1], longitude=temp[2], capacity=temp[3])
    edge_list.append(temp_edge)

a0 = Application(0, [])
a1 = Application(1, ['1', '13', '14', '15', '7'])
# a1 = Application(1, ['1', '2', '3', '4'])
a2 = Application(2, ['2', '14', '16', '17', '8'])
a3 = Application(3, ['3', '14', '16', '20', '9'])
a4 = Application(4, ['4', '13', '14', '17', '10'])
a5 = Application(5, ['5', '13', '15', '18', '11'])
a6 = Application(6, ['6', '14', '16', '19', '12'])

app_list = [a0, a1, a2, a3, a4, a5, a6]

user_data = pd.read_excel('数据处理/data_sheets.xlsx', sheet_name='user_data2')
user_list = []
for i in range(len(user_data)):
    temp = user_data.loc[i].values[0:10]
    temp_user = User(i + 1, temp[1], temp[2], temp[3], temp[4:])
    user_list.append(temp_user)

DNA_SIZE = 266
POP_SZE = 10
CROSSOVER_RATE = 0.8
MUTATION_RATE = 0.005
N_GENERATIONS = 10


def fitness(plans):
    result = []
    for plan in plans:
        compute = DAG(plan=plan, service_type_sum=20, edge_list=edge_list, app_list=app_list)
        result.append(compute.run(user_list=user_list))
    return np.array(result)


def encode(plan):
    """
    将三维plan  变成二维 编码
    :param plan: 生成的初始方案
    :return:
    """
    pop = []
    for list_i in plan:
        new = [k for a in list_i for k in a]
        pop.append(new)
    return np.array(pop)


def decode(pop):
    """
    将二维plan变成三维plan 按照capacity来分割 我的天哪这何必呢 解码
    :param pop:
    :return:
    """
    plan = []
    for list_i in pop:
        # 开始按照capacity分割
        new_list = []
        index = 0
        for i in range(len(capacity)):
            temp = list_i[index:index + capacity[i]]
            new_list.append(temp)
            index = index + capacity[i]
        plan.append(new_list)
    return plan


def get_fitness(pop):  # pop 是一堆plan 所以是个三维 但是要基因操作所以得是二维的
    plan_group = decode(pop=pop)
    pred = fitness(plan_group)
    return pred - np.min(pred)


def crossover_and_mutation(pop, CROSSOVER_RATE=0.8):
    new_pop = []
    for father in pop:
        child = father
        if np.random.rand() < CROSSOVER_RATE:
            mother = pop[np.random.randint(POP_SZE)]  # 随机选一个个体作为母亲
            cross_points = np.random.randint(low=0, high=DNA_SIZE)
            child[cross_points:] = mother[cross_points:]
        mutation(child)
        new_pop.append(child)
    return new_pop


def mutation(child, MUTATION_RATE=0.005):
    if np.random.rand() < MUTATION_RATE:
        mutation_point = np.random.randint(0, DNA_SIZE)
        # 突变成什么模块
        child[mutation_point] = np.random.randint(low=0, high=20)


def select(pop, fitness):
    idx = np.random.choice(np.arange(POP_SZE), size=POP_SZE, replace=True,
                           p=(fitness) / (fitness.sum()))
    return pop[idx]

def print_info(pop):
    fitness = get_fitness(pop)
    max_fitness_index = np.argmax(fitness)
    print("max_fitness:", fitness[max_fitness_index])
    print("最优的基因型：", pop[max_fitness_index])


if __name__ == '__main__':
    pop = [
        [2, 16, 17, -1, -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, 4, 6, 10, 19, -1, -1, 1, 2, 13, 16, -1, -1, -1, 4,
         -1, -1, -1, -1, -1, 2, 9, -1, -1, -1, 3, 4, 6, 12, -1, 1, 19, -1, -1, -1, -1, -1, -1, 2, 3, -1, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, -1, 5, 7, 11, -1, -1, -1, -1, 3, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 8,
         12, 19, 20, 2, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, 5, 15, 18, -1, -1, -1,
         -1, 4, 8, -1, -1, -1, -1, -1, -1, 4, 7, 10, 17, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 9, 13, 14, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, 2, 6, 9, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, 1, 3, 6, 9, -1, -1, -1, 1, 5, 7,
         9, 13, 14, 16, 3, 7, 8, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 11, 15, -1, -1, -1, -1, 17, -1, -1, -1, -1,
         -1, -1, -1, 1, 7, 8, 13, 15, 16, 1, 3, 14, 15, 16, -1, -1, -1, -1, -1, -1, -1, -1, 5, 6, 11, 12, 17, 18, 20, 1,
         4, 17, 20, -1, -1, -1, -1, -1, -1, -1, -1, 11, 13, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, 1, 3, 8, 9, 14, -1,
         -1],
        [2, 8, 17, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 3, 4, -1, -1, -1, -1, 3, 8, 16, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, 3, 6, 14, -1, -1, 3, 4, 19, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
         -1, -1, 3, 13, 15, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, 7, 9, 18, 20, -1, -1, 2, 3, 4, -1, -1, -1, -1, 2,
         8, 12, 19, -1, 2, 6, 10, 16, 19, -1, 5, -1, -1, -1, -1, -1, -1, -1, 6, 11, 15, 17, 18, -1, 5, -1, -1, -1, -1,
         -1, -1, 2, 3, 14, -1, -1, -1, -1, -1, 4, 7, 10, 16, 16, 17, 20, 3, 11, 15, -1, -1, 4, 6, 8, 10, 13, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, 1, 4, 9, 14, -1, -1, -1, 1, 5,
         13, 16, -1, -1, -1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 5, 13, -1, -1, -1, -1, 17, -1, -1, -1,
         -1, -1, -1, -1, 1, 2, 8, 9, 13, 15, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 8, 9, 11, 12, 17, 18,
         1, 4, 7, 9, 12, 14, 14, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 1, 6, 7, 15, -1, -1,
         -1],
        [16, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 4, 9, 12, 13, -1, 8, 12, 15, 17, -1, -1, -1,
         4, -1, -1, -1, -1, -1, 1, 2, 3, -1, -1, 4, -1, -1, -1, -1, 3, 6, -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, -1, -1, 1, 5, 16, 18, -1, -1, -1, 13, 15, 20, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, 2,
         8, 12, 13, 20, 1, 7, 10, 15, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 7, 11, 17, -1, -1, -1, 5, 11, 14, -1, -1,
         -1, -1, 1, 2, -1, -1, -1, -1, -1, -1, 3, 4, 7, 10, 19, -1, -1, 5, -1, -1, -1, -1, 2, 4, 8, 15, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, 1, 9, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, 6, 9, -1, -1, -1, -1, -1, 3, 6,
         7, 9, 19, -1, -1, 2, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 13, 18, -1, -1, -1, -1, 3, 17, -1, -1,
         -1, -1, -1, -1, 1, 3, 7, 14, 16, 17, 13, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 5, 11, 14, 16,
         18, 3, 4, 6, 9, 10, 14, 6, 14, -1, -1, -1, -1, 3, 11, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 2, 6, 8, 9, 15,
         20, -1],
        [8, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 4, 6, 12, 13, 16, 1, 2, 9, -1, -1, -1, -1, 6,
         -1, -1, -1, -1, -1, 1, 19, -1, -1, -1, 3, 4, 10, 17, -1, 3, 6, -1, -1, -1, -1, -1, -1, 1, 4, 9, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, -1, 3, 9, 11, 13, 14, -1, -1, 5, 11, 15, -1, -1, -1, 2, 8, -1, -1, -1, -1, -1, 2, 8,
         12, 19, 20, 2, 6, 12, 16, 17, -1, 3, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1,
         -1, 2, 8, 15, 17, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, 5, 13, 18, -1, -1, 2, 4, 9, 10, 14, 17, -1, -1,
         -1, -1, -1, -1, -1, -1, 3, 13, 16, -1, -1, -1, -1, 10, 15, -1, -1, -1, -1, -1, 1, 16, -1, -1, -1, -1, -1, 4, 5,
         7, 18, 20, -1, -1, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 6, 9, 11, -1, -1, 17, -1, -1, -1,
         -1, -1, -1, -1, 2, 8, 14, 20, -1, -1, 1, 7, 15, -1, -1, -1, -1, 6, 9, 14, -1, -1, -1, 1, 5, 11, 14, 16, 18, 19,
         3, 4, 7, 13, 15, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 7, -1, -1, -1,
         -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 4, 9, 14, 20, -1, -1, 16, -1, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, -1, 3, 8, 9, 14, -1, 4, 19, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 2, 4, 6, 8, -1,
         -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1,
         -1, 2, 8, 12, 19, 20, 2, 3, 6, 8, 9, 10, 19, -1, -1, -1, -1, -1, -1, -1, -1, 6, 11, -1, -1, -1, -1, 5, 11, 15,
         18, -1, -1, -1, 1, 2, 13, -1, -1, -1, -1, -1, 4, 10, 17, -1, -1, -1, -1, 5, -1, -1, -1, -1, 1, 4, 6, 7, 15, -1,
         -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 9, 14, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 7, 9, 14, 16, -1, -1,
         1, 3, 4, 5, 7, -1, -1, 1, 8, 16, 17, 20, -1, -1, -1, -1, -1, -1, -1, -1, 11, 13, -1, -1, -1, -1, -1, 13, 15,
         17, -1, -1, -1, -1, -1, 1, 2, 3, 16, 17, -1, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 5, 11, 12,
         14, 17, 18, 3, 4, 6, 10, 12, 13, 7, -1, -1, -1, -1, -1, 5, 15, -1, -1, -1, 3, 5, 18, -1, -1, -1, -1, 3, 7, 8,
         9, 13, -1],
        [3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 7, 15, 16, 19, -1, 2, 7, 8, 12, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, 2, 6, 14, -1, -1, 4, 6, 10, 17, -1, 3, 9, -1, -1, -1, -1, -1, -1, 9, 14, -1, -1, -1,
         -1, -1, 15, 17, -1, -1, -1, -1, -1, 1, 5, 6, -1, -1, -1, -1, 1, 5, 7, 14, -1, -1, 4, 5, 8, -1, -1, -1, -1, 2,
         8, 12, 13, 20, 1, 2, 6, 10, 14, 16, -1, -1, -1, -1, -1, -1, -1, -1, 9, 18, -1, -1, -1, -1, 11, -1, -1, -1, -1,
         -1, -1, 15, 17, -1, -1, -1, -1, -1, -1, 4, 6, 10, -1, -1, -1, -1, 5, 15, 18, -1, -1, 1, 2, 4, 13, 17, -1, -1,
         -1, -1, -1, -1, -1, -1, -1, 1, 2, 7, 16, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, 3, 4, 7, 16, -1, -1, -1, 3,
         11, 13, 19, -1, -1, -1, 1, 16, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 13, -1, -1, -1, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, 3, 6, 8, 12, -1, -1, 3, 9, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 8, 11, 18,
         20, -1, 3, 4, 9, 20, -1, -1, 14, -1, -1, -1, -1, -1, 1, 5, -1, -1, -1, 5, 11, -1, -1, -1, -1, -1, 1, 2, 3, 15,
         -1, -1, -1],
        [8, 16, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, 2, 6, 9, -1, -1, -1, -1,
         5, 18, -1, -1, -1, -1, 8, -1, -1, -1, -1, 4, 7, 10, 14, 16, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1,
         -1, -1, 20, -1, -1, -1, -1, -1, -1, 1, 5, 11, -1, -1, -1, -1, 3, 5, 15, -1, -1, -1, 1, 2, -1, -1, -1, -1, -1,
         2, 8, 12, 19, -1, 1, 3, 7, 10, 17, -1, 5, -1, -1, -1, -1, -1, -1, -1, 5, 6, 9, -1, -1, -1, -1, -1, -1, -1, -1,
         -1, -1, 1, 6, -1, -1, -1, -1, -1, -1, 4, 12, 13, 15, 16, 17, 19, 20, -1, -1, -1, -1, -1, 1, 4, 6, 10, 13, 14,
         -1, -1, -1, -1, -1, -1, -1, -1, 2, 7, 8, 16, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, 3, 7, 14, 16, -1, -1, -1,
         1, 4, 6, 12, 13, 19, 20, 2, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 11, 13, -1, -1, -1, -1, 13, 17,
         -1, -1, -1, -1, -1, -1, 1, 2, 3, 7, 8, 9, 3, 6, 9, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 5, 8, 9, 11, 14,
         18, 3, 4, 9, 15, 17, -1, 14, -1, -1, -1, -1, -1, 1, 11, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, -1, -1,
         -1, -1],
        [1, 2, 16, 17, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 4, 7, 20, -1, -1, -1, 1, 3, 6, 14, 17, -1, -1, -1,
         -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, 4, 6, 10, 13, -1, 1, 3, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1,
         -1, 13, -1, -1, -1, -1, -1, -1, 7, 11, 18, -1, -1, -1, -1, 3, 7, 11, 12, 19, -1, 4, 11, 15, 16, -1, -1, -1, 2,
         8, 12, 19, 20, 2, 3, 8, 9, 10, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 14, 15, -1, -1,
         -1, -1, 8, 14, -1, -1, -1, -1, -1, -1, 4, 15, 16, 17, 19, -1, -1, 5, 13, -1, -1, -1, 4, 9, 10, 13, 14, -1, -1,
         -1, -1, -1, -1, -1, -1, -1, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 4, 6, 9, 16, -1, 3, 5,
         9, -1, -1, -1, -1, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 18, -1, -1, -1, -1, -1, 15, 17, -1, -1,
         -1, -1, -1, -1, 1, 2, 3, 6, 8, 12, 1, 3, -1, -1, -1, -1, -1, 7, 13, -1, -1, -1, -1, 2, 5, 8, 18, -1, -1, -1, 1,
         4, 6, 17, -1, -1, 6, 14, -1, -1, -1, -1, 5, -1, -1, -1, -1, 5, 11, 15, -1, -1, -1, -1, 1, 9, -1, -1, -1, -1,
         -1],
        [8, 13, 14, 15, 16, 17, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, 4, 17, -1, -1, -1, -1, 1, 2, 8, -1, -1, -1, -1, 5,
         16, -1, -1, -1, -1, 3, 17, -1, -1, -1, 4, 10, 14, 16, -1, 6, 19, -1, -1, -1, -1, -1, -1, 4, 8, -1, -1, -1, -1,
         -1, 12, -1, -1, -1, -1, -1, -1, 9, 14, 18, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, 2, 15, -1, -1, -1, -1, -1, 2,
         8, 13, 19, 20, 7, 10, 20, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 7, 15, -1, -1, -1, -1, 15, -1, -1, -1, -1,
         -1, -1, 1, 3, 6, 9, 17, -1, -1, -1, 4, 9, 10, 14, 20, -1, -1, 5, 11, -1, -1, -1, 2, 3, 4, 6, 8, 9, -1, -1, -1,
         -1, -1, -1, -1, -1, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 6, -1, -1, -1, -1, 3, 4, 5, 6,
         11, 12, 13, 2, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 18, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1,
         -1, -1, -1, 1, 3, 7, 12, 16, 19, 1, 3, 7, 13, 16, -1, -1, -1, -1, -1, -1, -1, -1, 1, 5, 11, 14, 18, -1, -1, 1,
         3, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, 11, 15, -1, -1, -1, -1, -1, 1, 2, -1, -1, -1, -1,
         -1],
        [16, 16, 17, -1, -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, 4, 20, -1, -1, -1, -1, 6, 7, 8, -1, -1, -1, -1,
         5, -1, -1, -1, -1, -1, 3, 15, 17, -1, -1, 4, 9, 17, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 2, 4, 15, 16, -1,
         -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 11, 16, -1, -1, -1, -1, 6, 13, 14, 15, -1, -1, 13, 15, -1, -1, -1, -1,
         -1, 2, 8, 12, 19, 20, 3, 10, 20, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 5, 13, 15, 18, -1, -1, -1, -1, -1,
         -1, -1, -1, -1, 1, 3, 9, -1, -1, -1, -1, -1, 4, 9, 12, 14, 17, 19, -1, 5, 11, 18, -1, -1, 1, 2, 4, 8, 10, 13,
         3, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 6, 7, -1, -1, -1,
         1, 3, 4, 9, 12, 19, -1, 2, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 7, 13, -1, -1, -1, -1, 17, -1, -1,
         -1, -1, -1, -1, -1, 2, 3, 6, 7, 8, 9, 1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 5, 11, 14, 18,
         -1, 3, 4, 10, 14, -1, -1, 6, 14, -1, -1, -1, -1, 5, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 1, 2, 8, -1,
         -1, -1, -1]]
    for _ in range(N_GENERATIONS):
        pop = np.array(crossover_and_mutation(pop, CROSSOVER_RATE))
        fitness = get_fitness(pop)
        pop = select(pop, fitness)
        print_info(pop)